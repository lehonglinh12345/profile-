import { useState, useRef, useEffect, useCallback, useMemo } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { MessageCircle, X, Send, Loader2, User, Bot, ExternalLink, Smile, Sparkles, MousePointer, Upload, FileText, Image as ImageIcon } from "lucide-react";
import Picker from "emoji-picker-react"; // npm install emoji-picker-react
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils"; // Gi·∫£ s·ª≠ b·∫°n c√≥ cn utility t·ª´ shadcn

interface Message {
  role: "user" | "assistant";
  content: string;
  file?: { 
    name: string; 
    content?: string; 
    url?: string; 
    type?: string; // Th√™m type ƒë·ªÉ ph√¢n bi·ªát image/file
  }; // Th√™m file attachment v·ªõi type
  timestamp?: Date;
}

interface ContextState {
  topic: string | null;
  lastUserQuery: string | null;
  entities: string[];
}

interface Prediction {
  text: string;
  confidence: number;
}

// üß© Th√¥ng tin c·ªë ƒë·ªãnh c·ªßa b·∫°n (m·ªü r·ªông v·ªõi th√™m chi ti·∫øt t·ª´ GitHub v√† profile)
const BOT_KNOWLEDGE = `
B·∫°n l√† con Bot c·ªßa H·ªìng Lƒ©nh.
H·ªìng Lƒ©nh l√† sinh vi√™n ng√†nh K·ªπ Thu·∫≠t Ph·∫ßn M·ªÅm, ƒëam m√™ ph√°t tri·ªÉn web v√† ·ª©ng d·ª•ng.
D·ª± √°n n·ªïi b·∫≠t:
- Web Profile c√° nh√¢n (React + Vite + TypeScript): https://github.com/lehonglinh12345/profile
- XML_LEHONGLINH2211061 (Python): https://github.com/lehonglinh12345/XML_LEHONGLINH2211061
- DA (HTML/CSS/JS): https://github.com/lehonglinh12345/DA
K·ªπ nƒÉng: React, Vite, TypeScript, Python, HTML/CSS/JS, Supabase.
N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ "Facebook", "GitHub", "d·ª± √°n", "email", "li√™n h·ªá", "k·ªπ nƒÉng", "skills", "h·ªçc v·∫•n", "tr∆∞·ªùng h·ªçc", "python", "xml", "react", "vite",
h√£y tr·∫£ l·ªùi b·∫±ng c√°c th√¥ng tin th·∫≠t sau:
- Facebook: https://www.facebook.com/re.hon.rin.2025?mibextid=wwXIfr&rdid=6yl1jmw2ruRP07u1&share_url=https%3A%2F%2Fwww.facebook.com%2Fshare%2F1GSWHpf8Zj%2F%3Fmibextid%3DwwXIfr
- GitHub: https://github.com/lehonglinh12345
- Email: lehonglinhcd2004@gmail.com
- K·ªπ nƒÉng: React, Vite, TypeScript, Python, HTML/CSS/JS, Supabase.
- H·ªçc v·∫•n: Sinh vi√™n K·ªπ Thu·∫≠t Ph·∫ßn M·ªÅm.
Khi ng∆∞·ªùi d√πng ch√†o, h√£y ch√†o l·∫°i m·ªôt c√°ch th√¢n thi·ªán b·∫±ng ti·∫øng Vi·ªát.
H√£y tr·∫£ l·ªùi vui v·∫ª, h·ªØu √≠ch, v√† khuy·∫øn kh√≠ch h·ªèi th√™m. S·ª≠ d·ª•ng ng·ªØ c·∫£nh t·ª´ l·ªãch s·ª≠ ƒë·ªÉ tr·∫£ l·ªùi li√™n t·ª•c.
N·∫øu ng∆∞·ªùi d√πng t·∫£i l√™n file (text, code, PDF) ho·∫∑c ·∫£nh, h√£y ƒë·ªçc/m√¥ t·∫£ n·ªôi dung file/·∫£nh v√† s·ª≠ d·ª•ng n√≥ ƒë·ªÉ tr·∫£ l·ªùi th√¥ng minh h∆°n, v√≠ d·ª•: ph√¢n t√≠ch code, t√≥m t·∫Øt t√†i li·ªáu, m√¥ t·∫£ ·∫£nh, ho·∫∑c tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu trong file/·∫£nh.
`;

const LinkIcon = () => <ExternalLink className="h-3 w-3 inline ml-1 opacity-70" />;

// Component ƒë·ªÉ render content v·ªõi auto-link URLs v√† emoji support (c·∫≠p nh·∫≠t: h·ªó tr·ª£ render ·∫£nh preview)
const MessageContent = ({ content, isUser, file }: { content: string; isUser: boolean; file?: Message['file'] }) => {
  const urlRegex = /(\bhttps?:\/\/[^\s<>"']+)/g;
  const parts = useMemo(() => content.split(urlRegex), [content]);

  return (
    <div>
      <span className="whitespace-pre-wrap leading-relaxed">
        {parts.map((part, i) => {
          if (part.match(urlRegex)) {
            return (
              <a
                key={i}
                href={part}
                target="_blank"
                rel="noopener noreferrer"
                className={cn(
                  "inline-flex items-center gap-1 transition-colors break-all",
                  isUser
                    ? "text-blue-200 hover:text-white underline underline-offset-2"
                    : "text-blue-600 hover:text-blue-800 underline underline-offset-2"
                )}
              >
                {part.length > 50 ? `${part.substring(0, 50)}...` : part}
                <LinkIcon />
              </a>
            );
          }
          return <span key={i}>{part}</span>;
        })}
      </span>
      {file && (
        <div className="mt-2 p-2 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center gap-2">
          {file.type?.startsWith('image/') ? (
            <ImageIcon className="h-4 w-4 text-gray-500" />
          ) : (
            <FileText className="h-4 w-4 text-gray-500" />
          )}
          <span className="text-sm text-gray-600 dark:text-gray-400 truncate max-w-[200px]">{file.name}</span>
          {file.url && (
            <>
              {file.type?.startsWith('image/') ? (
                <img 
                  src={file.url} 
                  alt={file.name} 
                  className="ml-auto w-20 h-20 object-cover rounded border"
                  onError={(e) => { e.currentTarget.style.display = 'none'; }} // ·∫®n n·∫øu l·ªói load
                />
              ) : (
                <a href={file.url} target="_blank" rel="noopener noreferrer" className="ml-auto text-blue-600 hover:underline">
                  üìé
                </a>
              )}
            </>
          )}
          {file.content && !file.type?.startsWith('image/') && (
            <details className="ml-auto text-xs text-gray-500 cursor-pointer">
              <summary>Xem n·ªôi dung</summary>
              <pre className="mt-1 p-2 bg-gray-200 dark:bg-gray-800 text-xs overflow-auto max-h-32 rounded">
                {file.content.substring(0, 500)}... {/* Gi·ªõi h·∫°n hi·ªÉn th·ªã */}
              </pre>
            </details>
          )}
        </div>
      )}
    </div>
  );
};

// Component cho Typing Effect (t·ªëc ƒë·ªô 20ms/char, sau 3s hi·ªán h·∫øt ƒë·ªôt ng·ªôt)
const TypingMessage = ({ fullContent, onComplete }: { fullContent: string; onComplete: () => void }) => {
  const [displayedContent, setDisplayedContent] = useState("");
  const [isTyping, setIsTyping] = useState(true);
  const [showFull, setShowFull] = useState(false);
  const startTimeRef = useRef(Date.now());

  useEffect(() => {
    let index = 0;
    const typingInterval = setInterval(() => {
      const elapsed = Date.now() - startTimeRef.current;
      if (elapsed >= 3000) { // Sau 3s, hi·ªán h·∫øt ƒë·ªôt ng·ªôt
        setDisplayedContent(fullContent);
        setShowFull(true);
        setIsTyping(false);
        clearInterval(typingInterval);
        onComplete();
        return;
      }

      if (index < fullContent.length) {
        setDisplayedContent(fullContent.substring(0, index + 1));
        index++;
      } else {
        clearInterval(typingInterval);
        setIsTyping(false);
        onComplete();
      }
    }, 20); // T·ªëc ƒë·ªô nhanh h∆°n: 20ms/char

    return () => clearInterval(typingInterval);
  }, [fullContent, onComplete]);

  return (
    <div className="flex items-start gap-3 max-w-[80%] rounded-2xl px-4 py-3 shadow-sm border bg-white/90 dark:bg-gray-800/90 text-gray-800 dark:text-gray-200 rounded-bl-sm border-gray-200/50 dark:border-gray-700/50 backdrop-blur-sm transition-all duration-200">
      <div className="h-8 w-8 rounded-full bg-blue-600/20 flex-shrink-0 mt-0.5 flex items-center justify-center">
        <Bot className="h-4 w-4 text-blue-600" />
      </div>
      <div className="flex-1 min-w-0">
        <div className="text-sm">
          <span className="whitespace-pre-wrap leading-relaxed">{showFull ? fullContent : displayedContent}</span>
          {isTyping && !showFull && (
            <span className="inline-flex items-center gap-1 ml-1">
              <MousePointer className="h-3 w-3 text-blue-600 animate-pulse" />
            </span>
          )}
          {showFull && (
            <span className="inline-flex items-center gap-1 ml-1 text-blue-600">
              ‚ú®
            </span>
          )}
        </div>
      </div>
    </div>
  );
};

// Component cho Prediction Suggestion (c·∫£i thi·ªán UX v·ªõi fade-in)
const PredictionSuggestion = ({ suggestion, onAccept }: { suggestion: Prediction; onAccept: () => void }) => (
  <div className="absolute bottom-full left-0 right-0 mb-2 p-2 bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border border-gray-200/50 dark:border-gray-700/50 rounded-xl shadow-lg flex items-center justify-between z-20 animate-fade-in">
    <span className="text-sm text-gray-600 dark:text-gray-400 truncate max-w-[calc(100%-3rem)] font-medium">{suggestion.text}</span>
    <Button
      size="sm"
      variant="ghost"
      onClick={onAccept}
      className="h-6 w-6 p-0 ml-2 hover:bg-primary/10 transition-colors"
    >
      <Sparkles className="h-3 w-3 text-primary" />
    </Button>
  </div>
);

export const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    { role: "assistant", content: "Xin ch√†o üëã! M√¨nh l√† con Bot c·ªßa H·ªìng Lƒ©nh, b·∫°n c·∫ßn gi√∫p g√¨ h√¥m nay? H·ªèi m√¨nh v·ªÅ d·ª± √°n, k·ªπ nƒÉng hay li√™n h·ªá nh√©! üòä", timestamp: new Date() }
  ]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [context, setContext] = useState<ContextState>({ topic: null, lastUserQuery: null, entities: [] });
  const [prediction, setPrediction] = useState<Prediction | null>(null);
  const [isPredicting, setIsPredicting] = useState(false);
  const [typingResponse, setTypingResponse] = useState<string>(""); // Full response ƒëang typing
  const [showTyping, setShowTyping] = useState(false); // Flag cho typing effect
  const [selectedFile, setSelectedFile] = useState<File | null>(null); // Th√™m state cho file selected
  const [isUploading, setIsUploading] = useState(false); // Flag cho upload progress
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();
  const emojiRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null); // Ref cho file input

  // Gi·ªõi h·∫°n messages ƒë·ªÉ t·ªëi ∆∞u memory (gi·ªØ 100 messages cu·ªëi)
  const limitedMessages = useMemo(() => messages.slice(-100), [messages]);

  const scrollToBottom = useCallback(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [limitedMessages, scrollToBottom]);

  // ƒê√≥ng emoji picker khi click outside
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (emojiRef.current && !emojiRef.current.contains(e.target as Node)) {
        setShowEmojiPicker(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  // X·ª≠ l√Ω ch·ªçn emoji
  const onEmojiClick = useCallback((emojiData: any) => {
    setInput(prev => prev + emojiData.emoji);
    setShowEmojiPicker(false);
  }, []);

  // X·ª≠ l√Ω ch·ªçn file (h·ªó tr·ª£ text, PDF, v√† image/*)
  const handleFileSelect = useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Ki·ªÉm tra lo·∫°i file (h·ªó tr·ª£ text, PDF, image)
    if (!file.type.startsWith('text/') && file.type !== 'application/pdf' && !file.type.startsWith('image/')) {
      toast({
        title: "Lo·∫°i file kh√¥ng h·ªó tr·ª£",
        description: "Ch·ªâ h·ªó tr·ª£ file text (.txt, .js, .ts, .py), PDF, v√† ·∫£nh (jpg, png, gif). Th·ª≠ l·∫°i nh√©!",
        variant: "destructive",
      });
      return;
    }

    setSelectedFile(file);
    setIsUploading(true);

    let fileContent = '';
    let fileUrl = '';

    try {
      // Upload file l√™n Supabase Storage (bucket 'chat-files')
      const fileExt = file.name.split('.').pop();
      const fileName = `${Date.now()}-${file.name}`;
      const { data, error } = await supabase.storage
        .from('chat-files') // T·∫°o bucket n√†y trong Supabase n·∫øu ch∆∞a c√≥
        .upload(fileName, file, { upsert: true });

      if (error) throw error;

      fileUrl = supabase.storage.from('chat-files').getPublicUrl(fileName).data.publicUrl;

      // ƒê·ªçc n·ªôi dung client-side (cho text files)
      if (file.type.startsWith('text/')) {
        const text = await file.text();
        fileContent = text;
      } else if (file.type === 'application/pdf') {
        // Cho PDF, content s·∫Ω ƒë∆∞·ª£c extract server-side trong Supabase function
        fileContent = '[PDF content s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω server-side]';
      } else if (file.type.startsWith('image/')) {
        // Cho ·∫£nh, kh√¥ng ƒë·ªçc content, ch·ªâ g·ª≠i URL ƒë·ªÉ AI m√¥ t·∫£ (server-side)
        fileContent = `[H√¨nh ·∫£nh: ${file.name} - URL: ${fileUrl}]`;
      }

      toast({
        title: "File t·∫£i l√™n th√†nh c√¥ng!",
        description: `ƒê√£ th√™m ${file.name} v√†o tin nh·∫Øn.`,
      });
    } catch (error) {
      console.error("Upload error:", error);
      toast({
        title: "L·ªói t·∫£i file",
        description: "Kh√¥ng th·ªÉ t·∫£i file l√™n. Th·ª≠ l·∫°i nh√©!",
        variant: "destructive",
      });
      setSelectedFile(null);
      return;
    } finally {
      setIsUploading(false);
      // Clear file input
      if (fileInputRef.current) fileInputRef.current.value = '';
    }

    // T·ª± ƒë·ªông append file info v√†o input n·∫øu ch∆∞a c√≥ text
    if (!input.trim()) {
      setInput(`[File: ${file.name}] `);
    }
  }, [input, toast]);

  // üß† D·ª± ƒëo√°n tin nh·∫Øn ti·∫øp theo d·ª±a tr√™n input hi·ªán t·∫°i (t·ªëi ∆∞u v·ªõi fallback)
  const predictNextMessage = useCallback(async (currentInput: string) => {
    if (currentInput.length < 3 || isPredicting) return;

    setIsPredicting(true);
    try {
      const { data, error } = await supabase.functions.invoke("predict", {
        body: {
          prompt: `D·ª±a tr√™n l·ªãch s·ª≠ chat v√† input hi·ªán t·∫°i "${currentInput}", d·ª± ƒëo√°n c√¢u h·ªèi ti·∫øp theo v·ªÅ L√™ H·ªìng Lƒ©nh.`,
          context,
          history: limitedMessages.slice(-3).map(m => ({ role: m.role, content: m.content }))
        }
      });

      if (error) throw error;

      if (data?.prediction) {
        setPrediction({
          text: data.prediction.text,
          confidence: data.prediction.confidence || 0.8
        });
      } else {
        // Fallback prediction ƒë∆°n gi·∫£n d·ª±a tr√™n context
        if (context.topic) {
          setPrediction({
            text: `H·ªèi th√™m v·ªÅ ${context.topic}?`,
            confidence: 0.5
          });
        } else {
          setPrediction(null);
        }
      }
    } catch (error) {
      console.error("Prediction error:", error);
      // Fallback ƒë∆°n gi·∫£n
      if (context.topic) {
        setPrediction({
          text: `H·ªèi th√™m v·ªÅ ${context.topic}?`,
          confidence: 0.5
        });
      } else {
        setPrediction(null);
      }
    } finally {
      setIsPredicting(false);
    }
  }, [context, limitedMessages, isPredicting]);

  // Debounced prediction (t·ªëi ∆∞u b·∫±ng useEffect v·ªõi clearTimeout)
  useEffect(() => {
    if (!input) {
      setPrediction(null);
      return;
    }

    const timeoutId = setTimeout(() => {
      predictNextMessage(input);
    }, 500);

    return () => clearTimeout(timeoutId);
  }, [input, predictNextMessage]);

  // Ch·∫•p nh·∫≠n prediction
  const acceptPrediction = useCallback(() => {
    if (prediction) {
      setInput(prediction.text);
      setPrediction(null);
      inputRef.current?.focus();
    }
  }, [prediction]);

  // üß† Ph√¢n t√≠ch v√† c·∫≠p nh·∫≠t ng·ªØ c·∫£nh t·ª´ tin nh·∫Øn ng∆∞·ªùi d√πng (memoized)
  const updateContext = useCallback((userMessage: string) => {
    const lowerMsg = userMessage.toLowerCase();
    let newTopic = context.topic;
    const newEntities = [...context.entities];

    // Ph√°t hi·ªán ch·ªß ƒë·ªÅ ch√≠nh (t·ªëi ∆∞u logic)
    const topicMap = {
      "d·ª± √°n": "projects",
      "project": "projects",
      "k·ªπ nƒÉng": "skills",
      "skills": "skills",
      "h·ªçc v·∫•n": "education",
      "tr∆∞·ªùng": "education",
      "university": "education",
      "sinh vi√™n": "education",
      "li√™n h·ªá": "contact",
      "email": "contact",
      "contact": "contact",
      "react": "tech_stack",
      "python": "tech_stack",
      "xml": "tech_stack",
      "vite": "tech_stack"
    };

    for (const [key, value] of Object.entries(topicMap)) {
      if (lowerMsg.includes(key)) {
        newTopic = value;
        newEntities.push(key);
        break;
      }
    }

    // Gi·ªõi h·∫°n entities
    if (newEntities.length > 5) newEntities.shift();

    setContext(prev => ({
      topic: newTopic || prev.topic,
      lastUserQuery: userMessage,
      entities: newEntities
    }));
  }, [context]);

  // üß† Tr·∫£ l·ªùi th√¥ng minh n√¢ng cao v·ªõi ng·ªØ c·∫£nh ƒë·∫ßy ƒë·ªß (memoized dependencies)
  const smartReply = useCallback((text: string, history: Message[]): string | null => {
    const msg = text.toLowerCase().trim();
    const recentHistory = history.slice(-5).filter(m => m.role === "user").map(m => m.content.toLowerCase()).join(' ');

    // C·∫≠p nh·∫≠t context tr∆∞·ªõc
    updateContext(text);

    // Logic tr·∫£ l·ªùi (t·ªëi ∆∞u b·∫±ng early return)
    if ((msg.includes("ch√†o") || msg.includes("hi") || msg.includes("hello") || msg.includes("xin ch√†o")) && !recentHistory.includes("ch√†o")) {
      return "Ch√†o b·∫°n! üòä M√¨nh l√† tr·ª£ l√Ω c·ªßa L√™ H·ªìng Lƒ©nh ƒë√¢y. H√¥m nay b·∫°n kh·ªèe kh√¥ng? C√≥ g√¨ th√∫ v·ªã mu·ªën chia s·∫ª hay h·ªèi v·ªÅ H·ªìng Lƒ©nh kh√¥ng?";
    }

    if (msg.includes("b·∫°n l√† ai") || msg.includes("who are you") || msg.includes("bot l√† g√¨")) {
      return "M√¨nh l√† bot th√¥ng minh c·ªßa L√™ H·ªìng Lƒ©nh üíª, sinh vi√™n K·ªπ Thu·∫≠t Ph·∫ßn M·ªÅm si√™u nƒÉng ƒë·ªông! M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ d·ª± √°n, k·ªπ nƒÉng, ho·∫∑c li√™n h·ªá v·ªõi anh ·∫•y. B·∫°n mu·ªën bi·∫øt g√¨ n√†o? üöÄ";
    }

    if (msg.includes("facebook") || msg.includes("fb")) {
      return "ƒê√¢y l√† Facebook c·ªßa H·ªìng Lƒ©nh: üëâ https://www.facebook.com/re.hon.rin.2025?mibextid=wwXIfr&rdid=6yl1jmw2ruRP07u1&share_url=https%3A%2F%2Fwww.facebook.com%2Fshare%2F1GSWHpf8Zj%2F%3Fmibextid%3DwwXIfr. Gh√© thƒÉm v√† like nh√©! üëç";
    }

    if (msg.includes("github") || msg.includes("repo") || msg.includes("m√£ ngu·ªìn")) {
      return "GitHub c·ªßa H·ªìng Lƒ©nh ·ªü ƒë√¢y: üíª https://github.com/lehonglinh12345. C√≥ nhi·ªÅu d·ª± √°n hay ho nh∆∞ profile c√° nh√¢n v√† XML Python ƒë·∫•y! B·∫°n th√≠ch repo n√†o?";
    }

    if (msg.includes("d·ª± √°n") || msg.includes("project") || msg.includes("l√†m g√¨")) {
      if (context.topic === "projects" && context.lastUserQuery?.toLowerCase().includes("chi ti·∫øt")) {
        return "D·ª±a tr√™n c√¢u h·ªèi tr∆∞·ªõc v·ªÅ d·ª± √°n, m√¨nh recommend Web Profile: X√¢y d·ª±ng b·∫±ng React + Vite + TS, t√≠ch h·ª£p Supabase cho chat nh∆∞ m√¨nh. Code s·∫°ch, responsive v√† deploy d·ªÖ d√†ng! Demo live? üåü";
      }
      return `H·ªìng Lƒ©nh c√≥ v√†i d·ª± √°n ƒë·ªânh cao: 

üåê **Web Profile** (React + Vite + TS): https://github.com/lehonglinh12345/profile

üêç **XML_LEHONGLINH2211061** (Python): https://github.com/lehonglinh12345/XML_LEHONGLINH2211061

üìÑ **DA** (HTML/CSS/JS): https://github.com/lehonglinh12345/DA

Mu·ªën bi·∫øt chi ti·∫øt d·ª± √°n n√†o? üîç`;
    }

    if (msg.includes("k·ªπ nƒÉng") || msg.includes("skills") || msg.includes("c√¥ng ngh·ªá")) {
      if (context.entities.includes("react")) {
        return "V·ªÅ React, H·ªìng Lƒ©nh d√πng n√≥ cho frontend hi·ªán ƒë·∫°i, k·∫øt h·ª£p Vite ƒë·ªÉ build nhanh. Anh ·∫•y ƒëang h·ªçc hooks n√¢ng cao v√† state management v·ªõi Zustand! B·∫°n d√πng React ch∆∞a? ‚öõÔ∏è";
      }
      return "K·ªπ nƒÉng c·ªßa H·ªìng Lƒ©nh: React, Vite, TypeScript, Python, HTML/CSS/JS, Supabase. Anh ·∫•y ƒëang h·ªçc th√™m AI v√† full-stack dev! B·∫°n gi·ªèi g√¨? üí™";
    }

    if (msg.includes("h·ªçc v·∫•n") || msg.includes("tr∆∞·ªùng") || msg.includes("university") || msg.includes("sinh vi√™n")) {
      return "H·ªìng Lƒ©nh l√† sinh vi√™n ng√†nh K·ªπ Thu·∫≠t Ph·∫ßn M·ªÅm üéì t·∫°i tr∆∞·ªùng [T√™n tr∆∞·ªùng n·∫øu bi·∫øt]. ƒêang mi·ªát m√†i code v√† h·ªçc h·ªèi m·ªói ng√†y. B·∫°n h·ªçc tr∆∞·ªùng n√†o v·∫≠y? üìö";
    }

    if (msg.includes("python") || msg.includes("xml")) {
      if (recentHistory.includes("xml") && msg.includes("c√°ch d√πng")) {
        return "V·ªÅ XML Python, repo c·ªßa H·ªìng Lƒ©nh d√πng ElementTree ƒë·ªÉ parse v√† validate XML. Si√™u h·ªØu √≠ch cho data processing! Code m·∫´u: import xml.etree.ElementTree as ET... B·∫°n ƒëang build g√¨ v·ªõi Python? üêç";
      }
      return "V·ªÅ Python v√† XML, H·ªìng Lƒ©nh c√≥ repo **XML_LEHONGLINH2211061**: https://github.com/lehonglinh12345/XML_LEHONGLINH2211061. D·ª± √°n x·ª≠ l√Ω XML b·∫±ng Python si√™u cool! B·∫°n ƒëang l√†m g√¨ v·ªõi Python? üêç";
    }

    if (msg.includes("react") || msg.includes("vite")) {
      return "React + Vite l√† b·ªô ƒë√¥i y√™u th√≠ch c·ªßa H·ªìng Lƒ©nh! Xem **Web Profile**: https://github.com/lehonglinh12345/profile. Nhanh, hi·ªán ƒë·∫°i v√† d·ªÖ scale. B·∫°n ƒë√£ th·ª≠ ch∆∞a? ‚öõÔ∏è";
    }

    if (msg.includes("email") || msg.includes("li√™n h·ªá") || msg.includes("contact")) {
      return "üìß Email: lehonglinhcd2004@gmail.com. G·ª≠i tin nh·∫Øn cho H·ªìng Lƒ©nh nh√©, anh ·∫•y reply nhanh l·∫Øm! Ho·∫∑c qua Facebook n·∫øu th√≠ch chat h∆°n. üòÑ";
    }

    if (msg.includes("c·∫£m ∆°n") || msg.includes("thanks") || msg.includes("t·∫°m bi·ªát") || msg.includes("bye")) {
      if (context.topic) {
        return `Kh√¥ng c√≥ chi v·ªÅ ${context.topic}! üòä R·∫•t vui ƒë∆∞·ª£c tr√≤ chuy·ªán. H·∫πn g·∫∑p l·∫°i b·∫°n nh√©, quay l·∫°i h·ªèi th√™m v·ªÅ ${context.topic} b·∫•t c·ª© l√∫c n√†o! üëã`;
      }
      return "Kh√¥ng c√≥ chi! üòä R·∫•t vui ƒë∆∞·ª£c tr√≤ chuy·ªán. H·∫πn g·∫∑p l·∫°i b·∫°n nh√©, quay l·∫°i h·ªèi th√™m b·∫•t c·ª© l√∫c n√†o! üëã";
    }

    if (context.entities.length > 0 && (msg.includes("h∆°n") || msg.includes("th√™m"))) {
      const lastEntity = context.entities[context.entities.length - 1];
      if (lastEntity === "project") {
        return "Th√™m v·ªÅ d·ª± √°n: Ngo√†i profile, c√≥ DA d√πng pure HTML/CSS/JS cho ƒë·ªì √°n tr∆∞·ªùng. ƒê∆°n gi·∫£n nh∆∞ng hi·ªáu qu·∫£! B·∫°n quan t√¢m frontend hay backend h∆°n? üìä";
      } else if (lastEntity === "skill") {
        return "Th√™m k·ªπ nƒÉng: H·ªìng Lƒ©nh c≈©ng bi·∫øt Git, Docker c∆° b·∫£n v√† ƒëang h·ªçc Next.js. Full-stack journey! üöÄ";
      }
    }

    if (msg.includes("?") || msg.includes("h·ªèi")) {
      if (context.topic) {
        return null; // ƒê·ªÉ Supabase x·ª≠ l√Ω v·ªõi ng·ªØ c·∫£nh ƒë·∫ßy ƒë·ªß
      }
      return "C√¢u h·ªèi hay ƒë·∫•y! ƒê·ªÉ m√¨nh k·ªÉ th√™m v·ªÅ H·ªìng Lƒ©nh nh√©. Anh ·∫•y ƒëam m√™ code v√† d·ª± √°n open-source. B·∫°n h·ªèi c·ª• th·ªÉ h∆°n ƒëi! ü§î";
    }

    return null;
  }, [context, updateContext]);

  // Function ƒë·ªÉ start typing animation
  const startTyping = useCallback((response: string) => {
    setTypingResponse(response);
    setShowTyping(true);
  }, []);

  // Effect ƒë·ªÉ handle typing complete
  useEffect(() => {
    if (showTyping && typingResponse) {
      // Typing component s·∫Ω handle onComplete
    }
  }, [showTyping, typingResponse]);

  const sendMessage = useCallback(async () => {
    if (!input.trim() && !selectedFile || isLoading) return;

    const userMessage = input.trim();
    const fileInfo = selectedFile ? { 
      name: selectedFile.name, 
      content: '', 
      url: '', 
      type: selectedFile.type 
    } : undefined;
    setInput("");
    setSelectedFile(null);
    setPrediction(null);
    const newUserMsg: Message = { 
      role: "user", 
      content: userMessage || `[File/·∫¢nh ƒë√≠nh k√®m: ${fileInfo?.name}]`, 
      file: fileInfo,
      timestamp: new Date() 
    };
    setMessages(prev => [...prev, newUserMsg]);

    // üß† X·ª≠ l√Ω offline tr∆∞·ªõc v·ªõi ng·ªØ c·∫£nh ƒë·∫ßy ƒë·ªß (n·∫øu c√≥ file/·∫£nh, append content n·∫øu c√≥)
    let enhancedMessage = userMessage;
    if (fileInfo && fileInfo.content) {
      enhancedMessage += `\n\nN·ªôi dung file ${fileInfo.name}:\n${fileInfo.content}`;
    }
    const smartResponse = smartReply(enhancedMessage, messages);
    if (smartResponse) {
      startTyping(smartResponse);
      return;
    }

    setIsLoading(true);

    try {
      // N·∫øu c√≥ file/·∫£nh, c·∫ßn extract server-side; ·ªü ƒë√¢y g·ª≠i URL ƒë·ªÉ function x·ª≠ l√Ω
      const fileUrlToSend = fileInfo?.url || '';
      const { data, error } = await supabase.functions.invoke("chat", {
        body: {
          messages: [
            { role: "system", content: BOT_KNOWLEDGE },
            ...limitedMessages.map(m => ({ 
              role: m.role, 
              content: m.content + (m.file?.content ? `\n\nFile: ${m.file.content}` : '') 
            })),
            { 
              role: "user", 
              content: enhancedMessage,
              file_url: fileUrlToSend, // G·ª≠i URL file/·∫£nh cho function extract/m√¥ t·∫£ n·∫øu c·∫ßn
              file_type: fileInfo?.type
            }
          ],
          context
        }
      });

      if (error) throw error;

      const response = data?.response || "·ªí, c√¢u h·ªèi th√∫ v·ªã! M√¨nh ƒëang nghƒ© xem... B·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ h∆°n v·ªÅ H·ªìng Lƒ©nh kh√¥ng? ü§î";
      startTyping(response);
    } catch (error) {
      console.error("Chat error:", error);
      toast({
        title: "L·ªói k·∫øt n·ªëi",
        description: "Kh√¥ng th·ªÉ t·∫£i ph·∫£n h·ªìi t·ª´ server. Th·ª≠ l·∫°i nh√©!",
        variant: "destructive",
      });
      startTyping("Xin l·ªói üò¢, k·∫øt n·ªëi b·ªã l·ªói. Nh∆∞ng b·∫°n c√≥ th·ªÉ check GitHub c·ªßa H·ªìng Lƒ©nh: https://github.com/lehonglinh12345 ƒë·ªÉ xem d·ª± √°n hay ho!");
    } finally {
      setIsLoading(false);
    }
  }, [input, selectedFile, isLoading, limitedMessages, smartReply, context, toast, startTyping, messages]);

  // Handle typing complete
  const handleTypingComplete = useCallback(() => {
    setShowTyping(false);
    setMessages(prev => [...prev, { 
      role: "assistant", 
      content: typingResponse, 
      timestamp: new Date() 
    }]);
    setTypingResponse("");
  }, [typingResponse]);

  const handleKeyPress = useCallback((e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    } else if (e.key === "Tab" && prediction) {
      e.preventDefault();
      acceptPrediction();
    }
  }, [sendMessage, prediction, acceptPrediction]);

  const handleClose = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    setIsOpen(false);
    setShowEmojiPicker(false);
    setShowTyping(false);
    setSelectedFile(null);
    setContext({ topic: null, lastUserQuery: null, entities: [] });
    setPrediction(null);
  }, []);

  // ƒê√≥ng khi click outside (t·ªëi ∆∞u UX)
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (isOpen && e.target instanceof Element && !e.target.closest('.chat-container')) {
        setIsOpen(false);
        setShowEmojiPicker(false);
        setShowTyping(false);
        setSelectedFile(null);
        setContext({ topic: null, lastUserQuery: null, entities: [] });
        setPrediction(null);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [isOpen]);

  return (
    <>
      {/* N√∫t b·∫≠t chat - c·∫£i thi·ªán animation v·ªõi scale v√† glow */}
      <Button
        onClick={() => setIsOpen(true)}
        className={cn(
          "fixed bottom-6 right-6 z-50 h-14 w-14 rounded-full bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 shadow-2xl hover:shadow-[0_0_20px_rgba(139,92,246,0.5)] transition-all duration-300 hover:scale-110 hover:rotate-12",
          isOpen ? "scale-0 opacity-0" : "scale-100 opacity-100 animate-bounce-subtle"
        )}
        size="icon"
      >
        <MessageCircle className="h-6 w-6 drop-shadow-sm" />
      </Button>

      {/* C·ª≠a s·ªï chat - th√™m class cho outside click, tƒÉng height cho emoji */}
      {isOpen && (
        <div className="chat-container fixed bottom-6 right-6 z-50 w-96 h-[650px] flex flex-col shadow-2xl border border-white/20 backdrop-blur-md bg-white/90 dark:bg-gray-900/90 transition-all duration-300 scale-100 opacity-100 rounded-2xl overflow-hidden">
          <Card className="flex-1 flex flex-col overflow-hidden border-0 bg-transparent">
            {/* Header - gradient tinh t·∫ø h∆°n, th√™m subtle glow */}
            <div className="flex items-center justify-between p-4 border-b border-gray-200/50 dark:border-gray-700/50 bg-gradient-to-r from-blue-50/90 via-purple-50/90 to-pink-50/90 dark:from-gray-800/90 dark:via-gray-900/90 dark:to-gray-800/90 backdrop-blur-sm">
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse ring-2 ring-green-500/30" />
                <div className="flex items-center gap-1">
                  <Bot className="h-4 w-4 text-blue-600 drop-shadow-sm" />
                  <h3 className="font-semibold text-gray-800 dark:text-gray-200 tracking-tight">AI H·ªó Tr·ª£ H·ªìng Lƒ©nh</h3>
                </div>
              </div>
              <Button
                variant="ghost"
                size="icon"
                onClick={handleClose}
                className="h-8 w-8 hover:bg-gray-200/50 dark:hover:bg-gray-700/50 transition-all duration-200 rounded-full"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>

            {/* N·ªôi dung chat - c·∫£i thi·ªán scroll v·ªõi custom scrollbar, th√™m timestamp subtle */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gradient-to-b from-transparent via-white/50 to-gray-50/50 dark:via-gray-900/50 dark:to-gray-900/50 scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600">
              {limitedMessages.map((msg, i) => (
                <div
                  key={`${msg.role}-${msg.timestamp?.getTime() || i}`}
                  className={cn(
                    "flex animate-in slide-in-from-bottom-2 duration-300",
                    msg.role === "user" ? "justify-end" : "justify-start"
                  )}
                >
                  <div className={cn(
                    "flex items-start gap-3 max-w-[80%] rounded-2xl px-4 py-3 shadow-sm border",
                    msg.role === "user"
                      ? "bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-br-sm border-transparent"
                      : "bg-white/90 dark:bg-gray-800/90 text-gray-800 dark:text-gray-200 rounded-bl-sm border-gray-200/50 dark:border-gray-700/50 backdrop-blur-sm"
                  )}>
                    <div className={cn(
                      "h-8 w-8 rounded-full flex-shrink-0 mt-0.5 flex items-center justify-center",
                      msg.role === "user"
                        ? "bg-white/20"
                        : "bg-blue-600/20"
                    )}>
                      {msg.role === "user" ? (
                        <User className="h-4 w-4 text-white/80" />
                      ) : (
                        <Bot className="h-4 w-4 text-blue-600" />
                      )}
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="text-sm">
                        <MessageContent content={msg.content} isUser={msg.role === "user"} file={msg.file} />
                      </div>
                      <div className="mt-1 text-xs text-gray-400 dark:text-gray-500 opacity-0 group-hover:opacity-100 transition-opacity">
                        {msg.timestamp?.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
              {showTyping && typingResponse && (
                <div className="flex justify-start animate-in slide-in-from-bottom-2 duration-300">
                  <TypingMessage fullContent={typingResponse} onComplete={handleTypingComplete} />
                </div>
              )}
              {isLoading && !showTyping && (
                <div className="flex justify-start animate-in slide-in-from-bottom-2 duration-300">
                  <div className="bg-white/90 dark:bg-gray-800/90 rounded-2xl px-4 py-3 border border-gray-200/50 dark:border-gray-700/50 shadow-sm flex items-center gap-2 backdrop-blur-sm">
                    <div className="flex items-center gap-2">
                      <Loader2 className="h-4 w-4 animate-spin text-blue-600" />
                      <span className="text-sm text-gray-600 dark:text-gray-400 font-medium">ƒêang suy nghƒ© v·ªõi ng·ªØ c·∫£nh... üí≠</span>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>

            {/* Emoji Picker - di chuy·ªÉn ra ngo√†i Card ƒë·ªÉ tr√°nh overflow */}
            {showEmojiPicker && (
              <div ref={emojiRef} className="absolute bottom-[100px] right-0 z-30 w-80 shadow-2xl rounded-xl overflow-hidden border border-gray-200/50 dark:border-gray-700/50">
                <Picker onEmojiClick={onEmojiClick} height={350} className="border-none" />
              </div>
            )}

            {/* √î nh·∫≠p v·ªõi Prediction - th√™m n√∫t upload file/·∫£nh */}
            <div className="p-4 border-t border-gray-200/50 dark:border-gray-700/50 bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm relative">
              <div className="relative">
                <Input
                  ref={inputRef}
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyDown={handleKeyPress}
                  placeholder={context.topic ? `Ti·∫øp t·ª•c v·ªÅ ${context.topic}... (ho·∫∑c ƒë√≠nh k√®m file/·∫£nh)` : "H·ªèi m√¨nh v·ªÅ H·ªìng Lƒ©nh ƒëi... (VD: D·ª± √°n React? Ho·∫∑c upload file/·∫£nh ƒë·ªÉ ph√¢n t√≠ch)"}
                  disabled={isLoading || showTyping || isUploading}
                  className="flex-1 bg-white/80 dark:bg-gray-700/80 border-gray-300/50 dark:border-gray-600/50 focus:border-blue-500 focus:ring-1 focus:ring-blue-500/50 transition-all duration-200 placeholder-gray-500 pr-28 rounded-xl shadow-inner" // pr-28 ƒë·ªÉ ch·ªó cho upload button
                />
                {prediction && (
                  <PredictionSuggestion suggestion={prediction} onAccept={acceptPrediction} />
                )}
                {/* N√∫t Upload File/·∫¢nh */}
                <Button
                  type="button"
                  onClick={() => fileInputRef.current?.click()}
                  disabled={isLoading || showTyping || isUploading}
                  size="icon"
                  variant="ghost"
                  className="h-10 w-10 absolute right-28 top-1/2 -translate-y-1/2 hover:bg-gray-200/50 dark:hover:bg-gray-700/50 transition-all duration-200 rounded-full z-10"
                >
                  {isUploading ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <Upload className="h-5 w-5" />
                  )}
                </Button>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept=".txt,.js,.ts,.py,application/pdf,image/*"
                  onChange={handleFileSelect}
                  className="hidden"
                />
                <Button
                  type="button"
                  onClick={() => setShowEmojiPicker(prev => !prev)}
                  disabled={isLoading || showTyping || isUploading}
                  size="icon"
                  variant="ghost"
                  className="h-10 w-10 absolute right-20 top-1/2 -translate-y-1/2 hover:bg-gray-200/50 dark:hover:bg-gray-700/50 transition-all duration-200 rounded-full z-10"
                >
                  <Smile className="h-5 w-5" />
                </Button>
                <Button
                  onClick={sendMessage}
                  disabled={isLoading || showTyping || isUploading || (!input.trim() && !selectedFile)}
                  size="icon"
                  className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 disabled:opacity-50 shadow-lg hover:shadow-purple-500/25 transition-all duration-200 absolute right-2 top-1/2 -translate-y-1/2 rounded-full z-10 h-10 w-10"
                >
                  {isLoading || showTyping ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <Send className="h-4 w-4" />
                  )}
                </Button>
                {isPredicting && (
                  <div className="absolute right-12 top-1/2 -translate-y-1/2 flex items-center gap-1 bg-white/50 dark:bg-gray-800/50 px-2 py-1 rounded-full">
                    <Loader2 className="h-3 w-3 animate-spin text-gray-500" />
                    <span className="text-xs text-gray-500">ƒêang d·ª± ƒëo√°n...</span>
                  </div>
                )}
                {selectedFile && !isUploading && (
                  <div className="absolute left-2 top-1/2 -translate-y-1/2 flex items-center gap-1 bg-green-100 dark:bg-green-900/50 px-2 py-1 rounded-full text-xs">
                    {selectedFile.type.startsWith('image/') ? <ImageIcon className="h-3 w-3" /> : <FileText className="h-3 w-3" />}
                    {selectedFile.name.substring(0, 20)}...
                  </div>
                )}
              </div>
            </div>
          </Card>
        </div>
      )}
    </>
  );
};